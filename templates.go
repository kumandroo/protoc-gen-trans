package main

import (
	"text/template"
)

// File represents a proto file
type File struct {
	Name    string
	Package string
}

var fileHeaderTemplate = template.Must(template.New("header").Parse(`
// ------------------------------------
// Code generated by protoc-gen-flow
// source: {{.Name}}
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT!
// ------------------------------------

package {{.Package}}

import "fmt"
import "github.com/nutmeglabs/banda/idl/extensions/protoc-gen-trans/translations"

var _ = fmt.Println

`))

// Message represents a protobuf message type
type Message struct {
	Name             string
	TranslatedFields []*Field
	CompositeFields  []*Field
}

// Field represents a protobuf message field
type Field struct {
	Name    string
	IsArray bool
	IsMap   bool
}

var extractTranslationsTemplate = template.Must(template.New("extract").Parse(`
// ExtractTranslations func
func (m *{{.Name}}) ExtractTranslations(msgWithKeys *{{.Name}}, k translations.KeyGetter) map[string]string {
{{- if or .TranslatedFields .CompositeFields}}
	if m == nil {
		return nil
	}
	translationMap := make(map[string]string)
{{- range $index, $field := .TranslatedFields}}
{{- if not $field.IsArray }}
	if m.{{$field.Name}} != "" {
		oldKey := msgWithKeys.Get{{$field.Name}}()
		key := k.GetKey(oldKey, m.{{$field.Name}})
		translationMap[key] = m.{{$field.Name}}
		m.{{$field.Name}} = key
	}
{{- else }}
	for idx := range m.{{$field.Name}} {
		if m.{{$field.Name}}[idx] == "" {
			continue
		}
		var oldKey string
		if idx < len(msgWithKeys.Get{{$field.Name}}()) {
			oldKey = msgWithKeys.{{$field.Name}}[idx]
		}
		key := k.GetKey(oldKey, m.{{$field.Name}}[idx])
		translationMap[key] = m.{{$field.Name}}[idx]
		m.{{$field.Name}}[idx] = key
	}
{{- end}}
{{- end}}
{{- range $index, $field := .CompositeFields}}
{{- if $field.IsArray }}
	for idx, msg := range m.{{$field.Name}} {
		if msg != nil {
			var t map[string]string
			if idx < len(msgWithKeys.Get{{$field.Name}}()) {
				t = msg.ExtractTranslations(msgWithKeys.{{$field.Name}}[idx], k)
			} else {
				t = msg.ExtractTranslations(nil, k)
			}

			for key, v := range t {
				translationMap[key] = v
			}
		}
	}
{{- else if $field.IsMap }}
	for key, msg := range m.{{$field.Name}} {
		if msg != nil {
			var t map[string]string
			mapField := msgWithKeys.Get{{$field.Name}}()
			if mapField != nil && mapField[key] != nil {
				t = msg.ExtractTranslations(mapField[key], k)
			} else {
				t = msg.ExtractTranslations(nil, k)
			}

			for key2, v := range t {
				translationMap[key2] = v
			}
		}
	}
{{- else }}
	{
		t := m.{{$field.Name}}.ExtractTranslations(msgWithKeys.Get{{$field.Name}}(), k)
		for k, v := range t {
			translationMap[k] = v
		}
	}
{{- end}}
{{- end}}

	return translationMap
{{- else}}
	return nil
{{- end}}
}
`))

var getTranslationKeysTemplate = template.Must(template.New("GetTranslationKeys").Parse(`
// GetTranslationKeys func
func (m *{{.Name}}) GetTranslationKeys() []string {
{{- if or .TranslatedFields .CompositeFields }} 
	if m == nil {
		return nil
	}
	var keys []string
{{- range $index, $field := .TranslatedFields}}
{{- if $field.IsArray }}
	for _, f := range m.{{$field.Name}} {
		if f != "" {
			keys = append(keys, f)
		}
	}
{{- else }}
	if m.{{$field.Name}} != "" {
		keys = append(keys, m.{{$field.Name}})
	}
{{- end}}
{{- end}}
{{- range $index, $field := .CompositeFields}}
{{- if or $field.IsArray $field.IsMap }}
	for _, msg := range m.{{$field.Name}} {
		k := msg.GetTranslationKeys()
		keys = append(keys, k...)
	}
{{- else }}
	{
		k := m.{{$field.Name}}.GetTranslationKeys()
		keys = append(keys, k...)
	}
{{- end}}
{{- end}}
	return keys
{{- else }}
	return nil
{{- end}}
}
`))

var translateTemplate = template.Must(template.New("insert").Parse(`
// Translate func
func (m *{{.Name}}) Translate(getTranslation func (key string) string) {
{{- if or .TranslatedFields .CompositeFields }}
	if m == nil {
		return
	}
{{- range $index, $field := .TranslatedFields}}
{{- if $field.IsArray }}
	for idx := range m.{{$field.Name}} {
		if m.{{$field.Name}}[idx] != "" {
			m.{{$field.Name}}[idx] = getTranslation(m.{{$field.Name}}[idx])
		}
	}
{{- else }}
	if m.{{$field.Name}} != "" {
		m.{{$field.Name}} = getTranslation(m.{{$field.Name}})
	}
{{- end}}
{{- end}}
{{- range $index, $field := .CompositeFields}}
{{- if or $field.IsArray $field.IsMap }}
	for _, msg := range m.{{$field.Name}} {
		msg.Translate(getTranslation)
	}
{{- else }}
	m.{{$field.Name}}.Translate(getTranslation)
{{- end}}
{{- end}}
{{- end}}
}
`))
